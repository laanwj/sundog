#!/usr/bin/env python3
# Copyright (c) 2017 Wladimir J. van der Laan
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Generate interpreter skeleton
import sys

import opcodes, pme_defs

def gen_opcodes_enum(out = sys.stdout):
    out.write('''
#ifndef H_PSYS_OPCODES
#define H_PSYS_OPCODES

#define PSYS_OP_MAX_ARGS 3
enum psys_opcode_argtype {
    PSYS_OPARG_VAR=0,       /* "big" encoding */
    PSYS_OPARG_BYTE=1,
    PSYS_OPARG_WORD=2,
    PSYS_OPARG_ARGTMASK=15, /* argument type mask */
    PSYS_OPARG_SIGNED=16,   /* argument is signed (only makes sense for 1/2, not VAR) */
    PSYS_OPARG_RELFLAG=32,  /* argument is relative to end of instruction */
    PSYP_OPARG_NONE=255
};

struct psys_opcode_desc {
    const char *name;
    int num_args;
    unsigned char args[PSYS_OP_MAX_ARGS];
    int num_in;
    int num_out;
};

extern struct psys_opcode_desc psys_opcode_descriptions[256];

''')
    out.write('enum psys_opcode {\n')
    for i,op in enumerate(opcodes.OPCODES):
        out.write('    {} = 0x{:02x}'.format('PSOP_'+op[0].replace('-','_'), i))
        if i != 255:
            out.write(',')
        out.write('\n')
    out.write('};\n')
    out.write('\n')
    out.write('#endif\n')

def gen_opcodes_list(out = sys.stdout):
    out.write('''
/* auto-generated by gen_interpreter.py */
''')
    out.write('struct psys_opcode_desc psys_opcode_descriptions[256] = {\n')
    PAD_ARGS = 3
    for i,op in enumerate(opcodes.OPCODES):
        args = list(op[1]) + [0x00] * (PAD_ARGS - len(op[1]))
        args = ', '.join(('0x%02x' % x) for x in args)
        out.write('/* 0x%02x */ {%-10s, %2d, {%-16s}, %2d, %2d}' % (
            i,
            '"'+op[0].lower()+'"', 
            len(op[1]),
            args, 
            op[3] if op[3] is not None else -1, 
            op[4] if op[4] is not None else -1))
        if i != 255:
            out.write(',')
        out.write('\n')
    out.write('};\n')


def handler_name(x):
    op = opcodes.OPCODES[x]
    if op[2] & opcodes.UNDEF:
        return 'do_invalid'
    elif opcodes.SLDC0 <= x <= opcodes.SLDC31:
        return 'do_sldc'
    elif opcodes.SLDL1 <= x <= opcodes.SLDL16:
        return 'do_sldl'
    elif opcodes.SLDO1 <= x <= opcodes.SLDO16:
        return 'do_sldo'
    elif opcodes.SLLA1 <= x <= opcodes.SLLA8:
        return 'do_slla'
    elif opcodes.SSTL1 <= x <= opcodes.SSTL8:
        return 'do_sstl'
    elif opcodes.SCXG1 <= x <= opcodes.SCXG8:
        return 'do_scxg'
    elif opcodes.SIND0 <= x <= opcodes.SIND7:
        return 'do_sind'
    elif opcodes.SLOD1 <= x <= opcodes.SLOD2:
        return 'do_slod'
    elif opcodes.SCIP1 <= x <= opcodes.SCIP2:
        return 'do_scip'
    else:
        return 'do_'+op[0].lower().replace('-','_')

ACCESSORS = [
    'pc_big',  # varlen
    'pc_byte', # byte
    'pc_word', # LE word
]

def gen_dispatcher(out = sys.stdout):
    out.write('/* Read byte from PC */\n')
    out.write('static inline psys_byte pc_byte(struct psys_state *state)\n')
    out.write('{\n')
    out.write('    return psys_load_byte(state, state->ipc++);\n')
    out.write('}\n')
    out.write('\n')
    out.write('/* Read LE word from PC */\n')
    out.write('static inline psys_word pc_word(struct psys_state *state)\n')
    out.write('{\n')
    out.write('    psys_word a = psys_load_byte(state, state->ipc++);\n')
    out.write('    psys_word b = psys_load_byte(state, state->ipc++);\n')
    out.write('    return a | (b << 8);\n')
    out.write('}\n')
    out.write('\n')
    out.write('/* Read BIG (varlen) from PC */\n')
    out.write('static inline psys_word pc_big(struct psys_state *state)\n')
    out.write('{\n')
    out.write('    psys_word a = psys_load_byte(state, state->ipc++);\n')
    out.write('    if (a >= 0x80) {\n')
    out.write('        a = (a << 8) | psys_load_byte(state, state->ipc++);')
    out.write('    }\n')
    out.write('    return a;\n')
    out.write('}\n')
    out.write('\n')
    out.write('void psys_interpreter(struct psys_state *s)\n')
    out.write('{\n')
    out.write('    static void *dispatch_table[256] = {\n')
    for i,op in enumerate(opcodes.OPCODES):
        if (i & 7) == 0:
            out.write('    ')
        handler = handler_name(i)
        comma = ',' if i<255 else ''
        if (i & 7) == 7:
            out.write('{:}\n'.format('&&'+handler+comma))
        else:
            out.write('{:16}'.format('&&'+handler+comma))
    out.write('    };\n')
    out.write('    int op;\n')
    out.write('    int arg0,arg1,arg2;\n')
    out.write('    int tos0,tos1,tos2,tos3;\n')
    out.write('#define DISPATCH() op = pc_byte(s); goto *dispatch_table[op]\n')
    out.write('    DISPATCH();\n')
    generated = set()
    out.write('    while (s->running) {\n')
    for i,op in enumerate(opcodes.OPCODES):
        if op[2] & opcodes.UNDEF:
            continue
        handler = handler_name(i)
        if handler in generated:
            continue
        generated.add(handler)
        out.write('        {}:\n'.format(handler_name(i)))
        for i,arg in enumerate(op[1]):
            s = ACCESSORS[arg & opcodes.ARGTMASK]
            out.write('            arg{:d} = {}(s);\n'.format(i,s))
        if op[3] is not None:
            for i in range(op[3]):
                out.write('            tos{:d} = psys_pop(s);\n'.format(i))
        if op[4] is not None:
            for i in range(op[4]):
                out.write('            psys_push(s, 0);\n'.format(i))
        out.write('            DISPATCH();\n')
    out.write('        do_invalid:\n')
    out.write('            s->error = PSYS_ERR_INVALID_INSTRUCTION;\n')
    out.write('    }\n')
    out.write('    s->error = PSYS_OK;\n')
    out.write('}\n')

if __name__ == '__main__':
    with open('src/psys_opcodes.h', 'w') as out:
        gen_opcodes_enum(out)
    with open('src/psys_opcodes.c', 'w') as out:
        out.write('#include "psys_opcodes.h"\n')
        out.write('\n')
        gen_opcodes_list(out)
    #with open('src/psys_interpreter.c', 'w') as out:
    #    out.write('#include "psys_interpreter.h"\n')
    #    out.write('#include "psys_opcodes.h"\n')
    #    out.write('\n')
    #    gen_dispatcher(out)
